Required software installations:

(1)Download java jdk from oracle. Make sure it is Java 8 with at least 1.8.0_181 or above.
java -version
java version "1.8.0_181"

Set up JAVA_HOME appropriately in windows and/or mac. For mac, use make use of .bash_profile.

(2)Download maven from the apache site -- maven version 3.5.4 or above.
Set up maven appropriately in the class path.

For mac, modify .bash_profile (see the following example for maven 3.5.4 or above)
export M2_HOME=/Users/your_user_name/utilities/maven_3_5_4/apache-maven-3.5.4
export PATH=$PATH:$M2_HOME/bin

For windows, do the same for windows using environment settings and environment variables windows.

Ensure, there is a settings.xml under your user home .m2 directory.  If it does not exist, create it.
(There should be a .m2 folder under your home directory. Create the folder structure if it is missing).
Modify the contents of the settings.xml file.
Copy the contents of the attached settings.xml file to your settings.xml file.
Amongst other things, this will enable maven to download jar dependencies from the webmd nexus repo.

settings.xml


(3)If you are using eclipse, download the latest version of Eclipse from the Eclipse site.
If you are using intellij, download Intellij from the Intellij website. Intllij offers a 30 day trial.
Webmd has a license for Intellij at IDEA 2017.3.5 version.

The license can be obtained here (webmd license server link - click the link):

intellij

Configure Eclipse or Intellij appropriately for the java sdk that was downloaded as well as the maven version installed.

(4)The news letter builder project uses Postgres as the database.

Local Postgres installation and set up:

If using Windows, follow the instructions to install Postgres.
http://www.postgresqltutorial.com/install-postgresql/
The link has a step by step instruction to set up postgres.  (Create user user123 with password postgres@123, create database testdb, grant all privileges on database testdb to user123.) 

If using mac, use the following for detailed guide and what follows after the link for a quick set up.
https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb

Configuring Postgres for local development in mac:
Use the following as a quick guide to set up a local Postgres database, user and password for local development using Spring boot.
Use brew package manager to install postgres in mac:

If brew is not installed, install brew with the following command. Just type it in.

(Dont worry about what the command does. If you have MacOSX 10.7 or higher, the Ruby interpreter comes pre-installed.)
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

Now, use brew to install Postgres. Type the following in the terminal:
brew install postgresql

To make sure Postgres starts every time your mac computer starts up, execute the following command.

pg_ctl -D /usr/local/var/postgres start && brew services start postgresql

The version of postgres installed can be checked as follows:
postgres -V

Type the following to access the Postgres command line.
psql postgres

Type \du to see a list of preinstalled users. Type \q if you want to quit.
In the beginning, there should be a super user (usually you the owner of the mac computer).

Create a new role called user123 with password postgres@123 as follows:
This will be the user name and password when connecting to Postgres local dev environment using Spring boot
as well as DbVisualizer.
create role user123 with login password 'postgres@123';

Type the following to obtain create database permission for role user123:
alter role user123 createdb;

Now quit the current session by typing \q.

Login again to the Postgres command line with user user123 as follows:
psql postgres -U user123

Now create database testdb as follows:
create database testdb;

Grant privileges and permissions for database testdb to user user123 as follows:
grant all privileges on database testdb to user123;

Few more commands:
\list: lists all the databases in Postgres for that user 
\connect: connect to a specific database
\dt: list the tables in the currently connected database

Download and install the DB Visualizer database tool from the following site appropriate to your operating system:

(Select the download option without Java VM).
https://www.dbvis.com/download/10.0

This provides a GUI interface to access Postgres similar to SQLDeveloper for Oracle.

When connecting to the installed Postgres server user user123 as the user name and postgres@123 as the password.
Also type testdb as the name of the database next to the Database test field
Follow the instructions to install DBVisualizer and create a connection to the Postgres local database.

(5)Install git from the following site. Refer to the appropriate instructions for your operating system.
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

Set up private key as required.

(6)Download, install and set up Tomcat 9 from the apache site appropriate to your operating system:
https://tomcat.apache.org/download-90.cgi

Go to the conf directory of the local tomcat installation:
Edit context.xml file by adding:
<Resource auth="Container"
name="jdbc/postgres"
type="javax.sql.DataSource"
driverClassName="org.postgresql.Driver"
url="jdbc:postgresql://127.0.0.1:5432/testdb"
user="user123"
username="user123"
password="postgres@123"
maxTotal="20" maxIdle="10"
maxWaitMillis="-1"
/>

Edit tomcat-users.xml file to be able to access the locally installed tomcat manager admin page:
<role rolename="manager_gui"/>
<user username="user123" password="postgres@123" roles="tomcat, manager-gui"/>

The news letter builder project can be accessed from the following git url:
https://stash.portal.webmd.com/projects/PROFDEV/repos/newsletterbuilder/browse

Clone the project and import the project into your Eclipse spring tool suite (recommended if using eclipse) or Intellij Idea.
Make sure you can perform mvn clean install without any errors.
This will ensure you can successfully build the project that has been set up in your local environment including the Postgres connection specified in the newsletterbuilder project Spring boot application-dev.yaml properties file.
If there are issues, please contact me immediately.

Guidelines:
(1)Please write unit tests that test the validity of code thoroughly.
(2)Do not commit code and request for a pull request without a valid unit test relevant to the code being committed.

For unit tests we are using JUnit 5.0, Mockito and Spring test suite.
A few more tools will likely be added:
Selenium for web testing (front end)
Rest assured for rest controller testing

How to run the ddl for newsletter builder form a local postgres development database:

Grab the ddl schema.sql from feature/ppe-182056-ppe-182062-ppe-182074-ddl-pojo-dao

Run it using psql command line tool:

Note that the same user user123 and the created database testdb as described above have been used.

psql -U user123 -d testdb -f schema.sql
Another way to run the script and verify it is by running as mvn clean install the downloaded and cloned feature file.

Using a tool graphical like db visualizer or pgadmin, one can see that the database tables have been created in the database testdb under schema newsletter_builder.